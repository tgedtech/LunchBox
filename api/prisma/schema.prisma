generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventoryItems      InventoryItem[]
  shoppingListItems   ShoppingListItem[]
  shoppingListHistory ShoppingListItemHistory[]
  Recipe              Recipe[]
  RecipeCourse        RecipeCourse[]
  RecipeCuisine       RecipeCuisine[]
  RecipeTag           RecipeTag[]
}

model ProductCategory {
  id       String    @id @default(uuid())
  name     String    @unique
  favorite Boolean   @default(false)
  products Product[]
}

model Location {
  id             String          @id @default(uuid())
  name           String          @unique
  inventoryItems InventoryItem[]
  products       Product[]       @relation("DefaultLocationProducts")
}

model Unit {
  id               String             @id @default(uuid())
  name             String             @unique
  products         Product[]          @relation("DefaultUnitTypeProducts")
  RecipeIngredient RecipeIngredient[]
}

model Product {
  id              String  @id @default(uuid())
  name            String
  description     String?
  defaultQuantity String?
  defaultUnit     String?

  defaultLocation   Location? @relation("DefaultLocationProducts", fields: [defaultLocationId], references: [id])
  defaultLocationId String?

  defaultUnitType   Unit?   @relation("DefaultUnitTypeProducts", fields: [defaultUnitTypeId], references: [id])
  defaultUnitTypeId String?

  category   ProductCategory? @relation(fields: [categoryId], references: [id])
  categoryId String?

  inventoryBehavior Int                @default(1)
  inventoryItems    InventoryItem[]
  shoppingListItems ShoppingListItem[]
  Recipe            Recipe[]
  RecipeIngredient  RecipeIngredient[]
}

model InventoryItem {
  id         String    @id @default(uuid())
  quantity   Float
  unit       String
  expiration DateTime?
  opened     Boolean   @default(false)
  price      Float?
  product    Product   @relation(fields: [productId], references: [id])
  productId  String

  location   Location @relation(fields: [locationId], references: [id])
  locationId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id       String  @id @default(uuid())
  name     String  @unique
  favorite Boolean @default(false)

  inventoryItems    InventoryItem[]
  shoppingListItems ShoppingListItem[]
}

// === SHOPPING LIST MODELS BELOW ===

model ShoppingListItem {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  name       String?
  categoryId String?
  unit       String?
  quantity   Float   @default(1)
  price      Float?
  store      Store?  @relation(fields: [storeId], references: [id])
  storeId    String?
  vendorId   String?
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shoppingListItemHistories ShoppingListItemHistory[]
}

model ShoppingListItemHistory {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  shoppingListItem   ShoppingListItem? @relation(fields: [shoppingListItemId], references: [id])
  shoppingListItemId String?

  productId  String?
  name       String?
  categoryId String?
  unit       String?
  quantity   Float
  price      Float?
  storeId    String?
  vendorId   String?
  notes      String?
  removedAt  DateTime @default(now())
}

// -------------------- Recipes core --------------------

model Recipe {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ownership (optional scoping per user)
  createdByUser   User?   @relation(fields: [createdByUserId], references: [id])
  createdByUserId String?

  // Core fields
  title       String
  slug        String
  sourceUrl   String?
  description String?
  servings    Int?
  yields      String?
  favorite    Boolean @default(false)
  imageUrl    String?

  // Taxonomy
  course   RecipeCourse? @relation(fields: [courseId], references: [id])
  courseId String?

  cuisine   RecipeCuisine? @relation(fields: [cuisineId], references: [id])
  cuisineId String?

  keyIngredient     Product? @relation(fields: [keyIngredientId], references: [id])
  keyIngredientId   String?
  keyIngredientText String?

  // Relations
  ingredients RecipeIngredient[]
  steps       RecipeStep[]
  tags        RecipeTagOnRecipe[]

  @@unique([slug, createdByUserId]) // slug unique per user (null-safe)
  @@index([createdByUserId])
  @@index([courseId])
  @@index([cuisineId])
  @@index([favorite])
  @@index([title])
}

model RecipeStep {
  id       String @id @default(uuid())
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  idx       Int
  body      String
  minutes   Int?
  createdAt DateTime @default(now())

  @@unique([recipeId, idx])
  @@index([recipeId, idx])
}

enum RecipeIngredientType {
  ITEM
  HEADING
}

enum IngredientLinkStatus {
  PENDING
  LINKED
}

model RecipeIngredient {
  id       String @id @default(uuid())
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  idx  Int
  type RecipeIngredientType @default(ITEM)

  // Parsed fields for ITEM (nullable to allow HEADING rows)
  amount Decimal? @db.Decimal(10, 3)
  unit   Unit?    @relation(fields: [unitId], references: [id])
  unitId String?

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  name  String?
  notes String?

  // For HEADING rows
  heading String?

  // Always keep what the user typed
  rawText String

  // Linking workflow
  linkStatus    IngredientLinkStatus @default(PENDING)
  candidateName String?

  createdAt DateTime @default(now())

  @@unique([recipeId, idx])
  @@index([recipeId, idx])
  @@index([productId])
  @@index([unitId])
  @@index([linkStatus])
}

model RecipeCourse {
  id       String  @id @default(uuid())
  name     String
  favorite Boolean @default(false)

  createdByUser   User?   @relation(fields: [createdByUserId], references: [id])
  createdByUserId String?

  recipes Recipe[]

  @@unique([name, createdByUserId])
  @@index([favorite])
}

model RecipeCuisine {
  id       String  @id @default(uuid())
  name     String
  favorite Boolean @default(false)

  createdByUser   User?   @relation(fields: [createdByUserId], references: [id])
  createdByUserId String?

  recipes Recipe[]

  @@unique([name, createdByUserId])
  @@index([favorite])
}

model RecipeTag {
  id   String @id @default(uuid())
  name String

  createdByUser   User?   @relation(fields: [createdByUserId], references: [id])
  createdByUserId String?

  recipes RecipeTagOnRecipe[]

  @@unique([name, createdByUserId])
}

model RecipeTagOnRecipe {
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  tag   RecipeTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId String

  @@id([recipeId, tagId])
  @@index([tagId])
}
