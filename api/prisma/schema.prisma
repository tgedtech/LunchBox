generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventoryItems      InventoryItem[]
  shoppingListItems   ShoppingListItem[]
  shoppingListHistory ShoppingListItemHistory[]
}

model ProductCategory {
  id       String    @id @default(uuid())
  name     String    @unique
  favorite Boolean   @default(false)
  products Product[]
}

model Location {
  id             String          @id @default(uuid())
  name           String          @unique
  inventoryItems InventoryItem[]
  products       Product[]       @relation("DefaultLocationProducts")
}

model Unit {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[] @relation("DefaultUnitTypeProducts")
}

model Product {
  id              String  @id @default(uuid())
  name            String
  description     String?
  defaultQuantity String?
  defaultUnit     String?

  defaultLocation   Location? @relation("DefaultLocationProducts", fields: [defaultLocationId], references: [id])
  defaultLocationId String?

  defaultUnitType   Unit?   @relation("DefaultUnitTypeProducts", fields: [defaultUnitTypeId], references: [id])
  defaultUnitTypeId String?

  category   ProductCategory? @relation(fields: [categoryId], references: [id])
  categoryId String?

  inventoryBehavior Int             @default(1)
  inventoryItems    InventoryItem[]
  shoppingListItems ShoppingListItem[]
}

model InventoryItem {
  id         String    @id @default(uuid())
  quantity   Float
  unit       String
  expiration DateTime?
  opened     Boolean   @default(false)
  price      Float?
  product    Product   @relation(fields: [productId], references: [id])
  productId  String

  location   Location @relation(fields: [locationId], references: [id])
  locationId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id   String @id @default(uuid())
  name String @unique
  favorite Boolean @default(false)

  inventoryItems InventoryItem[]
  shoppingListItems ShoppingListItem[]
}

// === SHOPPING LIST MODELS BELOW ===

model ShoppingListItem {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  product    Product? @relation(fields: [productId], references: [id])
  productId  String?

  name       String?
  categoryId String?
  unit       String?
  quantity   Float     @default(1)
  price      Float?
  store      Store?    @relation(fields: [storeId], references: [id])
  storeId    String?
  vendorId   String?
  notes      String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  shoppingListItemHistories ShoppingListItemHistory[]
}

model ShoppingListItemHistory {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  shoppingListItem ShoppingListItem? @relation(fields: [shoppingListItemId], references: [id])
  shoppingListItemId String?

  productId  String?
  name       String?
  categoryId String?
  unit       String?
  quantity   Float
  price      Float?
  storeId    String?
  vendorId   String?
  notes      String?
  removedAt  DateTime @default(now())
}